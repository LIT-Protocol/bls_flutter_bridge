// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class Native {
  Future<String> encrypt(
      {required String publicKey,
      required String message,
      required String identity,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptConstMeta;

  Future<String> encryptTimeLockG2(
      {required String publicKey,
      required Uint8List message,
      required Uint8List identity,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptTimeLockG2ConstMeta;

  Future<String> encryptTimeLockG1(
      {required String publicKey,
      required Uint8List message,
      required Uint8List identity,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptTimeLockG1ConstMeta;

  Future<String> combineSignatureShares(
      {required List<String> shares, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCombineSignatureSharesConstMeta;

  Future<String> combineSignatureSharesInnerG1(
      {required List<String> shares, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCombineSignatureSharesInnerG1ConstMeta;

  Future<String> combineSignatureSharesInnerG2(
      {required List<String> shares, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCombineSignatureSharesInnerG2ConstMeta;

  Future<String> verifyAndDecryptWithSignatureShares(
      {required String publicKey,
      required String identity,
      required String ciphertext,
      required List<String> shares,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kVerifyAndDecryptWithSignatureSharesConstMeta;

  Future<String> verifyAndDecryptG2(
      {required String publicKey,
      required Uint8List identity,
      required Uint8List ciphertext,
      required List<String> shares,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVerifyAndDecryptG2ConstMeta;

  Future<String> verifyAndDecryptG1(
      {required String publicKey,
      required Uint8List identity,
      required Uint8List ciphertext,
      required List<String> shares,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVerifyAndDecryptG1ConstMeta;

  Future<void> verifySignature(
      {required String publicKey,
      required String message,
      required String signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVerifySignatureConstMeta;

  Future<void> verifySignatureInnerG2(
      {required String publicKey,
      required Uint8List message,
      required Uint8List signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVerifySignatureInnerG2ConstMeta;

  Future<void> verifySignatureInnerG1(
      {required String publicKey,
      required Uint8List message,
      required Uint8List signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVerifySignatureInnerG1ConstMeta;

  Future<Platform> platform({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPlatformConstMeta;

  Future<bool> rustReleaseMode({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRustReleaseModeConstMeta;

  Future<String> helloWorld({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHelloWorldConstMeta;
}

enum Platform {
  Unknown,
  Android,
  Ios,
  Windows,
  Unix,
  MacIntel,
  MacApple,
  Wasm,
}
